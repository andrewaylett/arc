@file:Suppress("UnstableApiUsage")

import org.checkerframework.gradle.plugin.CheckerFrameworkExtension

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
  `java-library`
  `jvm-test-suite`
  `maven-publish`
  id("eu.aylett.conventions") version "0.4.0"
  id("eu.aylett.plugins.version") version "0.4.0"
  id("org.checkerframework") version "0.6.45"
  id("com.diffplug.spotless") version "7.0.0.BETA4"
}

version = aylett.versions.gitVersion()

group = "eu.aylett.arc"

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  api(libs.jspecify)
  api(libs.checkerframework.qual)
  testImplementation(libs.hamcrest)

  checkerFramework(libs.checkerframework)
}

testing {
  suites {
    // Configure the built-in test suite
    val test by
        getting(JvmTestSuite::class) {
          // Use JUnit Jupiter test framework
          useJUnitJupiter("5.10.3")
        }
  }
}

aylett { jvm { jvmVersion = 21 } }

configure<CheckerFrameworkExtension> {
  extraJavacArgs =
      listOf(
          // "-AcheckPurityAnnotations",
          "-AconcurrentSemantics",
      )
  checkers =
      listOf(
          "org.checkerframework.checker.nullness.NullnessChecker",
          "org.checkerframework.common.initializedfields.InitializedFieldsChecker",
          "org.checkerframework.checker.lock.LockChecker",
      )
}

spotless {
  java {
    importOrder("", "java|javax|jakarta", "\\#", "\\#java|\\#javax|\\#jakarta")
    eclipse()
    indentWithSpaces(2)
    formatAnnotations()
  }
  kotlinGradle {
    ktlint()
    ktfmt()
  }
}

tasks.withType(JavaCompile::class) { mustRunAfter(tasks.named("spotlessJavaApply")) }

tasks.named("check").configure { dependsOn(tasks.named("spotlessCheck")) }

if (!providers.environmentVariable("CI").isPresent) {
  tasks.named("spotlessCheck").configure { dependsOn(tasks.named("spotlessApply")) }
}
